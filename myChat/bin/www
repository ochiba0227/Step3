#!/usr/bin/env node
var debug = require('debug')('myChat');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// 各ソケットの入室状態を示す連想配列
var room = new Array();

// add start
var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);

// クライアントが接続してきたときの処理
var chat = io.sockets.on('connection', function(socket) {
  console.log('connected\n'+'IP Addr:'+socket.handshake.address+'\n'+'Time:'+socket.handshake.time+'\n');
  socket.emit('connected');

  // 初期化処理
  socket.on('init', function(data) {
    room[socket.id]=data.room;
    socket.join(data.room);
    socket.broadcast.to(data.room).emit('publish', data.name + ' さんが入室');
  });

  // メッセージを受けたときの処理
  socket.on('publish', function(data) {
    // つながっているクライアント全員に送信
    console.log('published:'+data.value);
    chat.to(data.room).emit('publish', data.value );
  });

  // 同室の他クライアントへ接続要求を要請
  socket.on('callme', function(data) {
    // 自分以外のクライアントに送信
    console.log('callme');
    console.log(socket.id);
    socket.broadcast.to(data.room).emit('callfor', socket.id);
  });

  // 接続要求を特定のクライアントに送信
  socket.on('offer', function(data) {
    // 自分以外のクライアントに送信
    console.log('offer');
    console.log('data.id:'+data.id);
    console.log('socket.id:'+socket.id);
    chat.to(data.id).emit('offer', {desc:data.desc, id:socket.id});
  });

  // 接続要請を特定のクライアントに送信
  socket.on('answer', function(data) {
    // 自分以外のクライアントに送信
    console.log('answer');
    console.log('data.id:'+data.id);
    console.log('socket.id:'+socket.id);
    //socket.broadcast.to(data.room).emit('answer', data.answer);
    chat.to(data.id).emit('answer', {desc:data.answer, id:socket.id});
  });

  // メディアストリームを他のクライアントへ送信
  socket.on('icecandy', function(data) {
    // 自分以外のクライアントに送信
    console.log('icecandy');
    console.log('data.id:'+data.id);
    console.log('socket.id:'+socket.id);
    chat.to(data.id).emit('icecandy', {icecandy:data.icecandy, id:socket.id});
  });

  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log('disconnected\n'+'IP Addr:'+socket.handshake.address+'\n'+'Time:'+socket.handshake.time+'\n');
    //自動的に切断されるらしい
    //socket.leave(room[socket.id]);
  });
});