#!/usr/bin/env node
var debug = require('debug')('myChat');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// add start
var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log('connected\n'+'IP Addr:'+socket.handshake.address+'\n'+'Time:'+socket.handshake.time+'\n');

  // メッセージを受けたときの処理
  socket.on('publish', function(data) {
    // つながっているクライアント全員に送信
    console.log('published:'+data.value);
    io.sockets.emit('publish', { value: data.value });
  });

  socket.on('offer', function(data) {
    // 自分以外のクライアントに送信
    console.log('offer');
    console.log(data);
    //io.sockets.emit('offer', data);
    socket.broadcast.emit('offer', data);
  });

  socket.on('answer', function(data) {
    // 自分以外のクライアントに送信
    console.log('answer');
    console.log(data);
    //io.sockets.emit('answer', data);
    socket.broadcast.emit('answer', data);
  });

  socket.on('icecandy', function(data) {
    // 自分以外のクライアントに送信
    console.log('icecandy');
    console.log(data);
    //io.sockets.emit('icecandy', data);
    socket.broadcast.emit('icecandy', data);
  });

  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log('disconnected\n'+'IP Addr:'+socket.handshake.address+'\n'+'Time:'+socket.handshake.time+'\n');
  });
});