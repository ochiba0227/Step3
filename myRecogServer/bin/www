#!/usr/bin/env node
var debug = require('debug')('myRecogServer');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

// add start
var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log('connected\n'+'IP Addr:'+socket.handshake.address+'\n'+'Time:'+socket.handshake.time+'\n');
  socket.emit('connected',socket.id);
  socket.on('upload', function(data) {
  var fs = require('fs');
  var writeFile = data.file;
  var writePath = './uploads/'+data.name+'.wav';
  var writeStream = fs.createWriteStream(writePath);
  writeStream.on('drain', function () {} ).on('error', function (exception) {
    console.log("exception:"+exception);
    }).on('close', function () {
      //juliusの実行用
      var exec = require('child_process').exec;
      exec('cd C:\\julius\\ && echo C:\\Users\\Ochiba\\Documents\\step3\\myRecogServer\\uploads\\'+data.name+'.wav' + '|.\\bin\\julius -C main.jconf -C am-gmm.jconf',function (error, stdout, stderr) {
        console.log('stdout: ' + stdout);
        console.log('stderr: ' + stderr);
        if (error !== null) {
          console.log('exec error: ' + error);
        }
        var sentencePos = stdout.search('sentence1:');
        var sentence = stdout.substr(sentencePos);
        var newlinePos = sentence.search('\n');
        //10はsentence1:の長さ
        socket.emit('return',sentence.substring(10,newlinePos));
        //fs.unlink(writePath, function (){});
      });
    }).on('pipe', function (src) {});
    writeStream.write(writeFile,'binary');
    writeStream.end();
  }); 
});